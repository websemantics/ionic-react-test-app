'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = _interopDefault(require('react'));

const NavContext = /*@__PURE__*/ React.createContext({
    getHistory: () => window.history,
    getLocation: () => window.location,
    getViewManager: () => undefined,
    goBack: (defaultHref) => {
        if (defaultHref) {
            window.location.pathname = defaultHref;
        }
        else {
            window.history.back();
        }
    },
    navigate: (path) => { window.location.pathname = path; },
    hasIonicRouter: () => false,
    currentPath: undefined
});

const IonLifeCycleContext = React.createContext({
    onIonViewWillEnter: () => { },
    ionViewWillEnter: () => { },
    onIonViewDidEnter: () => { },
    ionViewDidEnter: () => { },
    onIonViewWillLeave: () => { },
    ionViewWillLeave: () => { },
    onIonViewDidLeave: () => { },
    ionViewDidLeave: () => { }
});
class DefaultIonLifeCycleContext {
    onIonViewWillEnter(callback) {
        this.ionViewWillEnterCallback = callback;
    }
    ionViewWillEnter() {
        if (this.ionViewWillEnterCallback) {
            this.ionViewWillEnterCallback();
        }
    }
    onIonViewDidEnter(callback) {
        this.ionViewDidEnterCallback = callback;
    }
    ionViewDidEnter() {
        if (this.ionViewDidEnterCallback) {
            this.ionViewDidEnterCallback();
        }
    }
    onIonViewWillLeave(callback) {
        this.ionViewWillLeaveCallback = callback;
    }
    ionViewWillLeave() {
        if (this.ionViewWillLeaveCallback) {
            this.ionViewWillLeaveCallback();
        }
    }
    onIonViewDidLeave(callback) {
        this.ionViewDidLeaveCallback = callback;
    }
    ionViewDidLeave() {
        if (this.ionViewDidLeaveCallback) {
            this.ionViewDidLeaveCallback();
        }
        this.componentCanBeDestroyed();
    }
    onComponentCanBeDestroyed(callback) {
        this.componentCanBeDestroyedCallback = callback;
    }
    componentCanBeDestroyed() {
        if (this.componentCanBeDestroyedCallback) {
            this.componentCanBeDestroyedCallback();
        }
    }
}

exports.DefaultIonLifeCycleContext = DefaultIonLifeCycleContext;
exports.IonLifeCycleContext = IonLifeCycleContext;
exports.NavContext = NavContext;
